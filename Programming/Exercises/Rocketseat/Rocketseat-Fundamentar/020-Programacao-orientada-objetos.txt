---------Programação orientada a objetos--------------

//O que é programação orientada a objetos POO?
-Oriented Object Programming ou OOP
-Um paradigma de desenvolvimento
-Uma maneira de resolver um problema, um mode de pensar
-Não está ligado somente a linguagem de programação, mas a um entendimento amplo e atemporal para criação de softwares

//Utilização no mercado
-Na maioria dos sistemas atuais
-Várias linguagens (JS, TS, Java, Python ...)
-Utilizado por Analistas de Sistemas e não somente por programadores
	Na fase de levantamento de requisitos de sistema
	Via gráficos, desenhos e textos

//Onde e quando eu vou utilizar?
-Linguagens
-Quando quiser aplicação Padrões de Projetos
-Quando quiaser organizar seu código
-Para melhor entendimento do código, pensando nele como Objetos
-Quando precisar fazer reuso de código
-Para separar a complexidade de código, abstrair código e expor de maneira mais simples
-Para classificar as torinas e trechos de códigos

//Conceitos
-Precisamos entender os conceitos e paradigma e não somente códigos
-Uma boa fundamentação
-Pegue papel e caneta, e anote os pontos para revisar posteriormente

//Objetos
-Uma caneta é objeto
	Propriedades e funcionalidades
	estado e comportamentos
	atributos e métodos

//Abstratos vc Mundo Real
-Trazemos a reprezentação de algo do mundo real para Objetos
	Pessoa
	Aluno
	Produto
	Carrinho de compras
-Porem, alguns objetos na programação não são fáceis de identificar, pois são abstratos como, por exemplo:
	Autenticação
	Autorização

//Classes (modelo)
-As classes na orientação a objetos funcionam como um molde para os objetos. Os objetos são criados a partir de uma classe e muitos deles podem ser feitos da mesma classe
-Exemplo: Máquina de biscoito
	Instâncias

//Classes em JavaScript
-Syntactical sugar
-Prototype

//Encapsulamento (fiz algo uma vez e depois não me preocupo com isto)
-Ex: Dirigir carro vs conhecer o motor do carro(Posso dirigir muito bem sem se preocupar como funciona o motor do carro)
-Colocar numa cápsula
-Agrupamento de funções e variáveis
-Esconder detalhes de implementação
-Camada de segurança para os atributos e métodos

//Programação estruturada vs Programação Orientada a objetos (Confusão e Solução)
-Programação Estruturada
	Processa a entrada e manipulação dos dados, até a 	saída
	Uso de sequências, estruturas de repetições e 	condições
	Uso de uma rotina maior, ou sub-rotinas
	Não existem restrições ás variáveis
-Programação orientada a objetos
	Surge para trazer um cuidado ao uso estruturado
	Não elimina por completo o uso estruturado
	Conceitos como objetos e classes
	Cuidados com variáveis e rotinas (encapsulamento)
	Melhor reuso de código (Herança)

//Herança
-Pais e filhos
-Objetos podem herdar, ou estender, características bases
-Uma cópia de atributos e métodos de outra classe
-Um objeto pode estender de outro objeto que pode estender de outro objeto
-Fácil reutilização de código

//Polimorfismo (sub-classe de uma herança)
-Exemplo pato herdar de pássaro, porém ele não voa
-Quando um objeto estende de outro (herança) talvez haja a necessidade de reescrever uma ou mais características (atributos e métodos) nesse novo objeto.
-Recriaremos então um método (ou mais) da classe herdada
-Polimorfismo significa muitas formas

//Abstração (template ou identidade de uma classe que será construída no futuro)
-Atributos e métodos podem ser criados na classe de abstração (Superclasse) mas
-A implementação dos métodos e atributos, só poderá ser feita na classe que irá herdar essa abstração

//Conclusão
		Orientação a objetos	
-Encapsulamento
-Herança
-Polimorfismo
-Abstração
			-Princípios
			-Introdução -> Oque é/ Paradigma (maneira 			de se entender ou interpretar o 					problema)/ Estrutural vc POO
			-Objetos
			-Classes
