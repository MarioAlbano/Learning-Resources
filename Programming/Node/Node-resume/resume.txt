//O que é Node.js?
-Javascript que executa fora de um navegador (V8)
-Utilizado para APIs
-Apenas um núcleo (single threaded), várias operações simultâneas (non-blocking)
-Vantagens: baixo custo pelo ótimo uso de memória, facilidade com o front-end, rápido simples e escalável

//Módulos no node.js
-Podemos criar nossos módulos e importá-los
-Node já vem com alguns pré instalados

//NPM - Node pacage manager
-Podemos instalar módulos de terceiros
-São armazenados no "node_modules"

//Criando e exportando
-Iniciar o projeto com o 'npm.init'
-Podemos criar nossos próprios módulos e depois usar o 'module.exports'
-No outro arquivo usar o 'require()'

//gitignore
-Criar '.gitignore'
-Adicionar 'node_modules/'

//Nodemon
-Para não subir o servidor sempre que ouver uma alteração, usamos o nodemoon
-'npm install nodemon --save-dev'
-depois no package.json, adicionar '"start": "nodemon index.js"'
-rodar com o npm start

//To-do API
-Testar os módulos: extname, parse, join
-Módulo fs e usar junto com path
-Com HTTP, criar rotas com if e else com respostas em JSON convertido
-Fazer o mesmo código com o Express
-Configurar cloud.mongodb
-Criar pasta src\database e criar o connect.js. Codificar o código com .dotenv e fazer a conexão com o banco
-Criar a pasta models e criar o arquivo user.models.js. Dentro do arquivo dar require no mongoose, criar um Shema e depois um model. Exportar módulo
-Importar para o express e criar um endpoint para criação de usuários
-Usar o app.use(express.json()). Baixar o Postman e testar a criação de usuário olhando no site do mongodb
-Criar rota com UserModel.find({})
-Criar rota com UserModel.findById()
-Criar rota com UserModel.findByIdAndUpdate(id, req.body, {new: true})
-Criar rota com UserModel.findByIdAndRemove

//Middlewares no express
-Funções executadas antes de qualquer ação do express

//Biblioteca ejs
-Criar variáveis que retornam para a view.  Exibir pelo pelo ejs o banco de dados usando uma lista para a view
-Dividir o html do ejs
-Incluir CSS no ejs
