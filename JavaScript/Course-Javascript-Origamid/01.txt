**************Javascript Iniciante*********************

//Variáveis
-Responsãveis por guardar dados na memória;
-Inicia com a palavra var, let ou const;
-Serve para evitar repetições;
-var nome = 'teste';
-let idade = 28;
-const sequencia = "23312";
-Pode retornar undefined;

//Nome
-Podem iniciar com $, _, ou letras;
-São case sensitive
-Não podemos utilizar palavras reservadas;
-É comum utilizarmos o camel case ex:abrirModal;

//Declarar
-Sempre temos que declarar uma variável senão retorna um erro;

//Hoisting
-São movidas para cima do código, porém o valor atribuído não é movido.
-Basicamente quando criamos as variáveis, elas vão para cima, porem o valor delas não ocorrem isto;

//7 tipos de dados
-Primitivo: São dados imutáveis. Todos são primitivos exceto os objetos;
-Ex: String, Number, Boolean, Undefined, Symbol, Object;
-Para verificar usar o 'typeof';

//Template string
-Você pode passar as concatenações mais facilmente com `` e mostrar as variáveis com 4{};

//Numeros
-precisão de até 15 digitos;
-para virgula, usamos ponto, ex: 3.14;
-Tambem podemos escrever expoente, exemplo 2e10;

//Operadores Aritméticos;
soma +;
ssubtração -;
multiplicação *;
divisão /;
expoente **;
modulo(restante) %;
-Operadores aritiméticos unários: adiciona + ou - para transformar o valor seguinte em número; 
-Podemos testar se o resultado é um número através da função isNaN();
-Podemos converter algo se é true ou false usando o "!!";

//Ordem das somas
-A ordem importa, igual como se fosse em matemática dando prioridades pros parênteses;

//Boolean
-Existem dois valores booleanos false ou true;
-usado para ajudar nos if e else
-Podemos usar "else if" para adicionar ainda mais uma condição;

//Truthy e Falsy
-Existem valres que retornam true e outros que retornam false quando verificados em uma expressão booleana. Ou seja: false, 0, NaN, undefined, "" sai do if;

//Operador lógico de negaçaõ
-Se colocarmos ! antes significa o contrário do que foi escrito;

//Operadores de comparação
-Vão sempre retornar um valor booleano;
-Ex: 10>5, 5>10, 20>=20;

//Operadores lógicos && , ||
-&& significa E(Retorna o ultimo true ou false);
-|| significa Ou(Retorna o primeiro true que enconrtar);

//Switch
-Com o switch você consegue fazer a mesma função do if else;
-Melhor usado em casos com muitas opções para deixar o código mais legível;

//Funções 
-Bloco de código que pode ser executado e reutilizado. Valores podem ser passados por uma função e a mesma retorna outro valor;
-Chamada de function declaration;
-Quando algo estiver escrito com chaves do lado significa função;

//Parâmetros e Argumentos
-Ao criar uma função, você pode definir parâmetros.
-Ao executar uma função, você pode passar argumentos.
-Podemos separar por vírgula cada parâmetro. Você pode definir mais de um parâmetro ou nenhum também.
-Argumento são os valores que você passa;
-Funções anônimas são aquelas que você não define;

//Argumentos podem ser funções
-Chamadas de Callback, geralmente são funções que ocorrem após algum evento.
-Ex addEventListener("click", function(){console.log("clicou")}); 
-Podemos passar uma função separada como argumento também;

//Pode ou não retornar um valor
-Quando não definimos o return, ela irá retornar undefined. O código interno da função é executado normalmente, independente de existir valor de return ou não.


//Valores retornados
-Uma função pode retornar qualquer tipo de dado e até outras funções;
-Dentro da função ele consegue ver a variavél criada, já fora da função não consegue;
-Hoisting(o fato do javascript jogar variáveis para cima) também ocorre com funções;

//Objetos
-Conjunto de variáveis e funções, que são chamadas de propriedades e métodos.
-Propriedades e métodos consistem em nome (chave) e valor.

//Métodos
-É uma propriedade que possui uma função no local do seu valor.
-Uma função dentro de um objeto;

//Para que serve um objeto
-Serve para organizar o seu código e deixar as partes reorganizáveis;
-Ex: console é um objeto e log() é um método;
-Sempre que tiver ponto, significa que estamos trabalhando com objeto;

