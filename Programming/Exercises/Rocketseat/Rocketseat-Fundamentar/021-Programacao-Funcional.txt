-------------- Programação funcional ----------------

//Por que JavaScript como linguagem para este curso?
-Linguagem da WEB
-Multiparadigma
-Foco no entendimento do paradigma

//Por que programação funcional?
-Organizar uma linha de raciocínio
-Entender uma nova maneira de abordar os problemas
-Algumas tecnologias tem como requisito

//Programação funcional?
-É um paradigma de programação como orientação a objetos, por exemplo
	Uma maneira de resolver problemas

//Funções
-Pequenas tarefas dentro de uma função
-Abstrair um problema e isolar ele dentro da função
-Não modificar dados fora dela
-Pequenas e bem específicas no que fazem

//Características principais da função
-Um dados (ou mais) entra em uma função e um novo dado sai dessa função
-Não altera dados
-Não guarda estado "stateless"

//Linguagens funcionais
-JavaScript (multiparadigma)
-PHP (multiparadigma)
-Elixir
-Haskell

//Ponsto positivos
-Fácil manutenção
-Fácil uso de testes
	Funções isoladas e consistentes
-Códigos mais confiáveis

//Princípios
-Paradigmas
	Programação imperativa
	Programação Declarativa
-Dados
	Imutabilidade
	Stateless
-Funções
	Independentes
	Puras
	Higher-order
	First-class
	Composição

//Programação imperativa vs declarativa
-Imperativo: Faça da seguinte forma
	O código é pensado e gerado em sequência
	O código é pensado como um passo-a-passo, como uma 	receita de bolo
	Uma coisa depende da outra
	O estado de um dado é alterado constantemente 	causando mutações nas variáveis
	Orientação a objetos é um tipo de paradigma 	imperativo
-Declarativa: O que fazer e não como fazer
	O código é gerado para fazer algo, não importa como
	O que fazer e não como fazer 
	Não há necessidade de um passo a passo no código
	Programação funcional é um tipo de paradigma 	declarativo

//Imutabilidade
-Ex: se temos uma bola azul e queremos uma bola amarela, não iremos pintar a bola azul de amarela, e sim criar uma bola amarela
-Uma variável não vai variar
-Se você precisar mudar uma variável, você não muda, você cria uma nova

//Stateless
-Não guarda estado
-A função só conhece dados entregues a ela
-A resposta não poderá variar

//Funções - Característica na programação funcional
-Funções independentes
-Funções puras
-First-class Functions
-Higher-order Functions
-Composição de Funções

//Funções independentes
-Deverá ter ao mesno 1 argumentos
-Deverá retornar algo
-Nada que acontecer lá dentro afeta o mundo externo
	Dados imutáveis
	Não guardar estado
-Não faremos uso de loops (for, while), mas se houver necessidade de tal, usaremos recursão (a função chama ela mesma)

//Funções puras
-Não deverá depender de nenhum dado externo a não ser o que foi passado como argumento
-Não deverá sofrer nenhuma interferência do mundo externo a ela
-Se o argumento é o mesmo, o retorno não poderá ser diferente quando a função for chamada novamente
-Não terá nenhum efeito colateral no seu código
	Não irá modificar nenhum dado
	Não irá guardar nenhum estado

//First-class function (uma função como variável)
-Podem estar em qualquer lugar, inclusive, como parâmetro de outras funções
-A função poderá ser entendida como uma variável

//Higher-order function (Uma higher order function é uma função que recebe uma outra como argumento, ou uma função que retorna outra função.)
-Funções que recebem funções como argumentos
-Funções que poderão retornar outra funções

//Composição de funções (Função que chama outra, que chama outra, que chama outra...)
-Um encadeamento de funções
-Uma funçãoque retorna um dado e vai para outra função, que retorna um dado e vai para outra função, que retorna ...

//Conclusão
-Paradigma de programação
-Linguagens
-Conceitos fundamentais
	Stateless(função não pode guardar nenhum estado nela), imutabilidade(Não pode alterar dados fora dela, somente dentro), Função pura(Valor retornado sempre será o mesmo coerente com o que foi passado para a função, será o mesmo se chamado outra vez, não guada e nem modifica nenhum dado), Higher-orders(Aceita outras funções como parâmetro ou retorna funções)
