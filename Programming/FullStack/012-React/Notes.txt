//React
-Uma biblioteca muito pedida pelo mercado
-React é "uma biblioteca Javascript declarativa, eficiente e flexível para criação de interfaces de usuário (UI)"
-É uma biblioteca, e não um framework pois resolve o problema de exibir as informações na tela
-Baseado em components, como se fossem blocos de lego para depois serem reaproveitados
-É usado para criar SPAs (single page application)
-É feito com Javascript
-O React é eficiente (Virtual DOM)
-Pode ser usado para criação de apps com react native
-Usada no Facebook, Instagram, Netflix, Whatsapp

//Components
-Pedaços da telas, que dividem a interface do usuário em partes independentes e reutilizáveis

//funções em javascript
-Aceitam entradas arbitrárias chamadas de proops	
-Retornam elementos react

//Dois tipos de componentes
-Função
-Classe(features extras)
-Exemplo de componente: function Welcome(props) {
	return <h1>Hello, {props.name}</h1>	
}

//O que é JSX
-Não é apenas HTML nem apenas JS
-Serve para mostrar como nossa user interface deve ser
-JSX não é imterpretado pelo browser, por isso devemos usar um transpiler(por exemplo o babel) e se transformará em um outro código
-Ao invés de colocar Javascript no HTML, o JSX nos permite colocar HTML em Javascript

//Vantagens do JSX 
-Similaridade com o HTML
-Melhor integração entre o HTML e o Js
-Exemplo: const element = <h1> className='title'>Hello World!</h1>

//Hello World em React
-instalar o react copiando o CDN link do site oficial
-criar uma div com o id 'root' e criar um arquivo js com o nome da página
-Exemplo de um componente
ReactDOM.render(
  React.createElement(
    'h1', null, 'Hello World'
  ),
  document.getElementById('root'));

//Como React atualiza as views
-DOM: objeto criado pelo browser e representa a estrutura do nosso documento html e nos dá meios para interagirmos com ele
-Virtual Dom: É uma representação em javascript do DOM original
-O DOM é mais lento e menos performático
-Virtual Dom encontra a maneira mais economica de atualizar o DOM
-para processamento, é mais barato criar elementos do react ao invez de elementos do dom
-Para renderizar um elemento, escolhemos um nó do DOM (no caso o div com id root) e tudo dentro desse nó será atualizado pelo Virtual Dom

//Create React App
-usar no terminal "npx creat-react-app nomedomeuapp";
-Usaremos a pasta src para alterar as depêndencias
-Para escrever um componente: function App() {
return()} 
-no final, o projeto react é compilado para html, css e js e pode ser hospedado em lugar que só aceita arquivos estáticos
-No package.json esta mais informações sobre nossa aplicação
-Create React App cria nossa aplicação com um servidor imbutido e com hot reload

//Criando um component
-Usar o function HelloWorld() {
return()}
-Dentro do return, é retornado o JSX
-dentro do componente principal, colocar em tags e fechar no final outros componentes que criamos, e: <HelloWorld/>
-props: parametros para a função
-usar import nomeDaFuncao from nomeDoArquivoJs
-usar export default nomeDaFuncao
-para facilitar, podemos criar as funções em arrow functions
-podemos usar um componente de classe, ex: class HelloWorld extends React.Component {render () {return ...;}}

//Criando um component Lorem Ipsum
-recriar o projeto
-na pasta src, criar uma pasta chamada components
-criar um componente em PascalCase contendo um lorem dentro de um <p>
-importe no App.js

//Agrupando components
-criar uma nova pasta dentro de src, e criar o index.js, pois sempre que você referenciar uma pasta, ele procurará o index.js
-Podemos criar um Fragment pois dentro de um componente só pode ter um único nó: <React.Fragment> </React.Fragment>
-Também podemos criar arquivos style e depois somente dar um import 'pasta/nomeDoArquivo'. Esta é uma forma básica de css no react

//Dividindo e reutilizando ccomponents
-Criar uma pasta para componentes reutilizáveis
-Criar por exemplo um style que pode ser reaproveitado em outros componentes

//Conhecendo as props(prorpiedades)
-função pura: não altera as propriedades passada a ela, se por exemplo os parâmetros forem os mesmos, os resultados sempre serão os mesmos. Função impura ocorre o contrário, os mesmos parâmetros podem ter resultados diferentes
-Única regra estrita do react: Todos os componentes React tem que agir como funções puras em relação ao seus props
-podemos usar o props para deixar os componentes dinâmicos, um exemplo é os mini vídeos do youtube, com props podemos fazer o mesmo código para mostrar nome de videos e visualizações diferentes para cada um