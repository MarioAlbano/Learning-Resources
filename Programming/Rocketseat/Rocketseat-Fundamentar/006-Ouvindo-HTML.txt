*****Audio e vídeo****

//Vídeo
-usar o "<video src"./arquivo.mp4" controls > </video> ";
-se não funcionar usar o fallback content;
-source 
	-src
	-type;
-Podemos deixar em serviços de terceiros por exemplo youtube, vimeo, dailymotion. Fazendo isso não consumimos dados dos nossos servidores;
-Podemos alterar o tamanho dentro de video controls. Podemos alterar quando starta o video com preload. Podemos digitar "loop" para reiniciar o vídeo toda vez que acabar. Muted para mutar. poster="" podemos definir uma tumbnail para o vídeo;

//Audio
-Semelhante a tag video;
-usamos <source src="./musica.mp3" type="audio/mp3"><source src="./musica.ogg" type="audio/ogg">
-Através do javascript conseguimos dar mais poderes para os controles de audio;
-Podemos colocar serviços de terceiros também;

//iframe
-Inline frame element;
-Um elemento que trás conteúdo externo;
-Copiamos um link de terceiro dentro dessa tag;
-Atributos:
	src
	height
	width
	title (acessibilidade)
	allowfullscreen
	frameborder
-Pesquisar mais na documentação;

//imagens
-<img>
	src
	alt
	title
	width
	heigth
	adicionando link
-ter cuidado com direitos autorais;

//Background-image no css
-com a tag style
-somente para estilo
-Não é semantico e falta significado

//figures
-Criando título visíveis para as imagens
-<figure> e <figcaption>

//SVG
-É uma marcação, estilo html, mas não é para textos, e sim para fazer imagens. Possuimos elementos para gerar formas;

//Para entender melhor
-Imagem rasterizada x imagem vetorizada

//Benefícios
-mais leve;
-mais detalhada;
-maior acessibilidade e SEO;
-pode ser editada via CSS ou atributos;

//Desvantagens
-Podem ser mais complicado de trabalhar
-Quanto mais complexa a imagem, mais trabalho para o navegador;
-Navegadores mais antigos não possuem suporte a essa tag;

//Mais sobre SVG
-Para fotografias, ainda prefira usar imagens rasterizadas;
-Podemos usar programas como por exemplo o figma para exportar arquivos svg;