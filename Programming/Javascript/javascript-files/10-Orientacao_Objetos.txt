***CONCEITOS DE ORIENTAÇÃO A OBJETOS***

//Orientação a objetos
-Uma forma de programar, que utiliza os objetos como o seu principal princípio;
-Além de utilizar conceitos e técnicas que envolvem objetos;
-a maioria dos softwares, na parte de back-end, são desenvolvidos em cima desse paradigma;
-Grandes frameworks se aproveitam desta técnica: Laravel(framework de php), Django(framework de phyton) e etc;
-Quando se aprende este conceito, ele serve para outras linguagens de promgramação;

//Métodos
-Propriedades que servem como funções;
-Ou seja, as ações dos objetos;
-Invocamos os métodos da mesma maneira que funções;
-Normalmente os métodos interagem com os objetos;
-Até mudando os valores das suas propriedades para corresponder a lógica do programa desenvolvido;
-This significa daquele objeto ou daquela coisa;


//Prototypes 
-Um objeto fallback de outro objeto;
-Quando um objeto recebe uma requisição de uma prorpiedades que não tem, ela procura no prorotype deste objeto;
-O prototype de um objeto criado do zero é o Object, que tem os métodos nativos da linguagem;
-Resumindo: Volta nas prorpiedades do objeto pai para procurar se há algo relacionado
-Object é o pai de todos os objetos;

//Mais sobre Prototypes
-Quando criamos um objeto a partir de um outro, a base será o prototype, seja do object ou novo objeto que nós criamos ;
-Ele herará tanto os métodos e propriedades de Object( o prototype do objeto base);
-Quanto os do objeto base para este novo;


//Classes 
-O prototype do javaScrip pode ser chamado de classe;
-Pois nas outras linguagens uma Class é um molde de um objeto;
-Ou seja, podemos criar diversos objetos em cima de um prototype;

//Classes: construtor por função
-Construtores são formas de instanciar uma classe em uma linguagem de programação;
-Instanciar = Criar um objeto novo;
No construtor já podemos definir propriedades;

//Classes: construtor por new
-Em muitas linguagens temos a possibilidade de instanciar um objeto com new, no JS também;

//Classes: construtor com método
-Além de propriedades, podemos criar a classe base já com métodos;
-basta definir ao prototype o método desejado;

//Construtor na classe ES6
-Com a versão do ES6, uma possibilidade de criar uma classe(objeto) com construtor foi adicionada;
-Então não precisamos mais criar por meio de uma função, veja:

//Override nas propriedades do Prototype
-Sempre quer adicionamos uma prorpiedade a um objeto, é criada uma idêntica no Prototype;
-Podemos substituir a do prototype;
-Resumindo, é para podermos saber o valor Default

//Mais sobre classes 
-Não podemos adicionar propriedades na classe, só via prototype;
-A classe só acita métodos;

//Symbols 
-Prorpiedades únicas, que não podem ser alteradas e nem criadas duas vezes;
-Podemos utilizar como uma constante, só que para propriedade de objeto;

//Getters e setters
-Get: serve para resgatar o valor de uma propriedade;
-Set: serve para alterar o valor de uma propriedade;

//Herança(inheritance)
-Uma classe pode herdar propriedades de outra classe por herança;
-Para isso utilizamos extends;


//Instanceof operator
-Podemos verificar quem é o pai do objeto utilizando o instanceof;


//Teste
-Um objeto pode ter:métodos e propriedades
