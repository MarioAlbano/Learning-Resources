//O que é uma linguagem de programação
-Conjunto de códigos que tem instruções para o computador
-Diferentes de linguagens de marcação e estilização
-Podem ser de alto nível(mais próxima da linguagem humana) ou baixo nível (mais proxima da linguagem do computador)
-Podem ser compiladas ou interpretadas

//Javascript
-Nome oficial ECMAScript. De alto nível e interpretada
-Multiparadigma
-Principal linguagem de programação usada pelos navegadores web
-Junto com HTML e CSS forma a web
-Pode ser usada fora do navegador através de runtimes como o node

//Tipos de dados
-Formas de representar dados
-Primitivos: As mais simples (number e bigint, string, boolean, null e undefined)
-Objetos e funções

//Variáveis
-Armazenam dados para usá-los no código
-Criando variáveis: var, let, const
-Nomeando variáveis: Nomes significativos, camelCase

//Operadores e expressões
-Operadores: aritméticos, agrupamento, atribuição, encadeamento, incremento e decremento

//Comentários
-Linhas do código que serão ignoradas
-Servem para ajudar a entender o código

//Recursos nativos do navegador
-console.log()
-console.error()
-console.warn()
-window.alert()
-window.prompt()
-window.confirm()
-document
-\n

//Comparação de dados
-Retornam um boolean
-Operadores ( ==, ===, !=, !==, >, >=, <, <= )

//Operadores lógicos
E(&&): Só verdadeiro se ambas foram verdadeiras
Ou(||): Só é falso se ambas forem falsas
Not(!): Inverte o resultado

//Estruturas condicionais
-Permite criar blocos de códigos que serão executadas somente quando uma determinada operação lógica for verdadeira
-Se o bloco de cima for falso, pode ser adicionado ELSE para acrescentar mais um bloco
-Operador ternário: Forma abreviada e autoavaliada do IF ELSE

//Switch
-Permite criar blocos como se fosse o IF, porém com vários casos
-Podemos definir algo para que se repita sempre
-Podemos parar a execução após algum caso

//While
-Estrutura de repetição
-Aceita o break para parar a repetição
-Atenção: precisa de uma condição falsa para não ter loop infinito

//Do while
-Parecido com o while, porém executa pelo menos uma vez o bloco mesmo que seja falsa
-Basicamente executa o do, e se a condição do while for verdadeira, refaz denovo a condição do do

//For
-Também serve para repetições, porém diferente do while e do while
-Exemplo é quando queremos iterar um número
-inicialização ; condição ; finalização

//Estrutura de dados
-Uma forma diferente de armazenar e organizar dados, facilitando na busca
-Estrutura de dados clássicas:
 Lista ligada -> um elemento indica outro
 Array -> coleção de elementos com índice
 Fila(Queue) -> FIFO -> Coleção de elementos, primeiro que entra, primeiro que sai
 Pilha(Stack) ->LILO -> Coleção de elementos onde o primeiro elemento ser retirado é o último a entrar
 Árvore(Tree) ->  Conjunto de elementos em nós, organizados em estrutura hierárquica não sequencial.

//Estrutura de dados no javascript e outras linguagens de alto nível
-Listas(Arrays)
-Dicionários(Objetos)
-Tipos primitivos: Valor(único) e Estrutura de dados: referência(alterar valor original)

//Arrays
-Estrutura flexível do javascript para se trabalhar com todo tipo de lista
-Pode armazenar qualquer tipo de dado e ter qualquer tamanho
-possuem funções para vários casos de uso como:
 enfileirar e desenfileirar
 empilhar e desempilhar
 achar o índice de um valro
 cortar e concatenar
 outros

//Trabalhando com arrays
Obs: Nem sempre conseguiremos ver o que está no array
-array.push -> insere no final do array
-array.unshift -> insere no inicio do array
-array.pop -> remove no final do array
-array.shift -> remove no início do array
-includes -> verifica se algo existe no array
-indexOf -> pesquisa pelo índice
-slice -> copia uma parte do array e salva em um novo. Ex: (arr.slice(0,4) ou (arr.slice(-4)
Obs2: Eles são novos arrays e mantém o original intacto
-concat -> cancatena dois arrays
-splice -> substitui elementos
-for usando []->   iterar elementos do array

//Arrays bidimensionais
-São como matrizes em matemática
-Um array dentro de outro array
-Utilizar console.table(array_matriz) para uma melhor visualização

//Objetos em javascript
-Estrutura para se trabalhar com chave e valor, onde Chave é o nome da propriedade e Valor o que está armazenado nessa propriedade
-Diferente dos arrays, não tem ordem, é como se estivessem soltos
-A propridade pode conter strings, números e booleanos e pode armazenar qualquer tipo de dado como valor
-Criadas com {}
-Propriedades e funções podem ser referenciadas por "."

//Funções em Javascript
-Estrutura para declarar um procedimento e exsecutá-lo
-Pode ser vista como :Entrada, Procedimento, Saída
-Entrada e saída são opcionais
-Entrada: Parâmetros (ou argumentos). Saidas: Retorno.
-Se a função não tiver um retorno, elá devolverá undefined
-Return só pode ser usado uma vez, e o que vem depois será inacessível

//Escopo
-Onde valores e expressões estão associados
-Não conseguimos ler fora a variável dentro da função, somente se passar o return
-var fica disponível no escopo mais externo
-var mesmo se declarado depois, acaba indo no topo do programa

//Métodos
-São funções atreladas a um objeto
-this: Serve para referenciar o própio objeto

//Funções recursivas
-Uma função que chama ela mesma até não poder mais
-Para isso ela tem algo dentro dele para ter uma condição falsa em determinado momento
-Para fazer isso, é só chamar a função() dentro da mesma função
-Tomar cuidado para não chamar a função infinitamente, pois cada chamada funciona como um sistema de pilha, em que a última precisa ser finalizada para a outra sser concluída
-Podemos usar um if e else para evitar funções infinitas

//Funções anônimas
-São funções que não tem nome
-Podemos armazenar funções em variáveis de modo simples
-Útil quando já temos uma função e queremos mudar o comportamento desta função no meio do programa
-Assim como variáveis criadas com o var, a função anônima não pode acessar antes da inicialização

// High-Order functions ou funções de alta ordem