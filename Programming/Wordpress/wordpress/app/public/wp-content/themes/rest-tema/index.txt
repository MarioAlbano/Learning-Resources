//Wordpress
-CMS (Onde uma função altera para um texto salvo em banco de dados)
-Mais utilizado do mundo (Mais de 50% da web utiliza)
-Open Source
-PHP e Mysql (fácil de aprender e baixo custo de servidores)
-O cliente não precisa saber HTML e Css, grande comunidade, customização, interface simples

//Wordpress.org vs Wordpress.com
-Org: Gratito, 100% Livre, Precisa ser Hospedado
-Com: Gratuito até certo ponto, código não é livre

//Necessário
-Servidor Web(Apache ou Nginx)
-Banco de dados (MySQL ou MariaDB)
-Linguagem de programação (PHP)
-Instaladores: Local by Flywheel(Mais simples), MAMP/XAMPP/WAMPPS(Mais utilizado porém da possíveis problemas), Vagrant/Docker(Mais difícil, praticamentar instalar 'na mão')

//Interface Wordpress
-Para logar, após a URL usar '/wp-admin'
-Sempre deixar o Wordpress atualizado (faça backup antes)

//Ações
-Postagem (Publicar, editar, salvar em rascunho)
-Adicionar mídia
-Páginas
-Temas
-Usuário

//Plugins importantes
-WooCommerce
-Yoast SEO
-Disable Gutenberg
-Duplitor

//Extra: Quanto cobrar pelo trabalho
-Cálculo: Quantos dias por mês? Qauntas horas? Nesse período, quantos sites? Pegar a soma e dividir por quanto é seu gasto de vida e adicionar uma margem de lucro
-Colocar também na conta ferramentas pagas como exemplo elementor pro e plugins pagos
-Simplificar a venda e passar o valor total, explicando o que está incluso
-Exemplos de preços: Site institucional (A partir de R$: 800,00), Blog (A partir de R$: 1500,00), Loja virtual (A partir de R$: 3000,00), sites Portais como imobiliária, loja de carro, hotel etc... (A partir de 4000,00).
-Adionar no valor funcionalidades que precisam ser adicionadas

//PHP para Wordpress
-Linguagem de programação, criada em 1994, gratuita e de código aberto
-Permite: Salvar e ler conteúdo de um banco de dados, escrever loops e condicionamentos, pegar informações do wordpress

//Editando arquivos PHP
-variáveis
-loop
-condicionamento

//Criando tema
-Entrar na pasta wp-content > themes e jogar a pasta com temas que contém style.css e um arquivo php
-Copiar informações do 'https://developer.wordpress.org/themes/basics/main-stylesheet-style-css/' e edita-las
-Salvar 'screenshot.png' com 880 x 660
-Corrigir caminhos do style com: <?php echo get_stylesheet_directory_uri()?>/nome_paste_depois_arquivo
-Separar o header e o footer do site

//Passo a Passo converter site para Wordpress
-1: Copiar a pasta do site para wp-content/themes/

-2: Mudar o index.html para index.php

-3: Colocar/criar o arquivo style.css na raiz do tema

-4: Adicionar a descrição do tema no topo do style.css
/*
Theme Name: Rest
Theme URI: http://rest.com
Author: André Rafael
Author URI: http://origamid.com/
Description: Tema criado para o restaurante Rest
Version: 1.0
*/

-5: Ativar o tema no Wordpress

-6: Corrigir o caminho do style.css e outros caminhos se necessário
<?php echo get_stylesheet_directory_uri(); ?>
Essa função adiciona o caminho até a raiz do tema

-7: Separar o header e footer em arquivos header.php e footer.php
Adicionar antes de fechar o head: <?php wp_head(); ?>
Adicionar antes de fechar o body: <?php wp_footer(); ?>
Adicionar o header e footer nas páginas do site e mudá-las para .php
Com <?php get_header(); ?> e <?php get_footer(); ?>

-8: Começar a substituir o conteúdo por funções de Wordpress
<?php bloginfo('name'); ?>
Mostra o nome do blog

-9: Adicionar as páginas na interface do Wordpress

-10: Transformar as páginas em HTML, em templates de Páginas
A página index.php deve estar reservada para conteúdo genérico.
Adicionar o nome page- na frente de cada template de página para facilitar a organização.
"<?php
// Template Name: Sobre
?>"

-11: Adicionar o Loop
O Loop é utilizado para mostrar o conteúdo dos posts,
ele é inteligente o suficiente para saber se precisa mostrar apenas um ou uma sequência.

Adicionar o Loop as páginas e ao index.php

<?php if ( have_posts() ) : while ( have_posts() ) : the_post(); ?>
	
	<?php the_title(); ?>
	<?php the_content(); ?>

<?php endwhile; else: ?>
<p><?php _e('Sorry, no posts matched your criteria.'); ?></p>
<?php endif; ?>

-12: Advanced Custom Fields

Adicionar o Plugin Advanced Custom Fields Pro
(Nota: O Pro é pago e só pode ser utilizado nos arquivos do curso).
(Existem alternativas, mas a lógica é a mesma)

Iniciar a troca do conteúdo por fields, <?php the_field('nome_conteudo'); ?>
Adicionar o conteúdo a interface do Custom Fields.

-13: Repeater Field

<?php if(have_rows('nomedorepeater')): while(have_rows('nomedorepeater')) : the_row(); ?>
	
	the_sub_field('nomedocampo');

<?php endwhile; else : endif; ?>

-14: Pegar valores de outras páginas

<?php
	$contato = get_page_by_title('contato');
	the_field('telefone', $contato)
?>

-15: Terminar de adicionar os outros campos
<?php echo date("Y"); ?> (Mostrar a data)

-16: Adicionar campos para SEO
<title><?php bloginfo('name'); ?> - <?php wp_title(''); ?> <?php the_field('title_seo'); ?></title>
<meta name="description" content="<?php bloginfo('name'); ?> - <?php wp_title(''); ?> <?php the_field('description_seo'); ?>">

-17: Adicionar o Functions.php

// Habilitar Menus
add_theme_support('menus');

// Funções para Limpar o Header
remove_action('wp_head', 'rsd_link');
remove_action('wp_head', 'wlwmanifest_link');
remove_action('wp_head', 'start_post_rel_link', 10, 0 );
remove_action('wp_head', 'adjacent_posts_rel_link_wp_head', 10, 0);
remove_action('wp_head', 'feed_links_extra', 3 );
remove_action('wp_head', 'wp_generator' );

-18: Adicionar o Menus

