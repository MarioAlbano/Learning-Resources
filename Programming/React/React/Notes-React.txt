//Como funciona os sites
-Parte back-end (lado do servidor onde não vemos)
-Parte front-end (parte onde se cria as telas de um modo agradável ao cliente)

//React
-Biblioteca para criação de interfaces
-São divididos em componentes
-Podemos ter componentes dentro de componentes
-Faz mais do que o js consegue sozinho
-Manipula a DOM 
-Utilizado para spa's

//O que é spa's
-Normalmente apos renderizado pelo HTML teriamos um modelo MVC, e cada view seria uma tela
-Com Spa's teriamos somente uma página principal e as outras são escritas e modificadas pelo javascript

//Iniciando um projeto React
-Primeiro precisamos do NPM
-"npx create-react-app my-app"
-"cd my-app"
-"npm start"

//Limpando o projeto
-limpar o App.js 
-limpar exportações e importações inúteis no index.js
-Deixar somente src > App.js, index.js, gitignore, package.json, readme

//Entendendo prosps e component
-Prop: atributo que possamos receber e mostrar para o usuário
-component: stateless: Componente burro, não tem ciclo de vida e só exibe

//Class component
-usar "import React, { Component } from "react";" na primeira linha
-usar "class NomeDoComponente extends Component{}"
-Podemos referenciar as props usando o "this"

//Para criar uma nova página
-Usar a linha "import React, { Component } from "react";"

//States
-Props são estáticas e states são estados que conseguimos trocar o valor dentro
-Criamos um constructor que recebe as props. Depois super(props) pra ele poder acessar todas as informações e usar tudo do componente pai que no caso o render(). Por último criar o this.state ={} para colocar todas as states que são relacionadas. Para usar, dentro do render colocamos {this.state.nomeDoMeuState}
-Com isso conseguimos mudar o valor da state sem ter que recarregar a página
-Podemos adicionar uma função sem o const enquanto estiver dentro da class

//Alterando a state
-Na função criada, usar o "this.setState(noDaVariável)"
-Debaixo do constructor, usar o bind, "this.nomeDaFuncao = this.nomeDaFuncao.bind(this);" significando que estamos querendo mudar o pai
-Fazer a lógica dentro da função, puxando o valor do state com "this.state.NomeDoMeuState"

//Reforçando states
-Componentes com estados: StateFull
-Compoenntes sem estados: StateLess
-Os sem estados são estados utilizados somente para algo pequeno no site	
-Com estados quase sempre seram vindas junto com classes

//Ciclos de vida de um componente
-É como o ciclo de vida de um ser humano: Cria, modifica várias vezes e morre

//componentDidMount(){}
-componentDidMount(){} Faz algo somente uma vez quando o componente é montado
-trabalhando com hora: criar dentro do componentDidMount um setInterval, e dentro da função anônima, chamar o setState e usar "nomeDoState: new Date().toLocaleTimeString" 
-ex: componentDidMount() {
    setInterval(() => {
      this.setState({ hour: new Date().toLocaleTimeString() });
    }, 1000);
  }

//componentDidUpdate(){}
-Ativa algo quando nosso state é atualizado

//shouldComponentUpdate(){}
-Um boolean se precisa ou não atualizar um state. Usamos juntamente com uma comparação

//Resumo ciclo de vida 
-Então como vimos na aula nos ciclos de vida do componente temos:
-Inicialização
-Montagem
-Atualização
-Desmontagem

//ciclo de vida
-Inicialização: Nesta fase, o componente React se prepara para sua inicialização, configurando os estados iniciais e props padrões se houverem.
- Montagem: Depois de preparar com todas as necessidades básicas, estado e props, o nosso Componente React está pronto para ser montado no DOM do navegador.
componentWillMount() É executado quando o componente estiver prestes a ser montado no DOM da página. Assim, após esse método ser executado o componente irá criar o nó no navegador. Todas as coisas que você deseja fazer antes do componente ser montado, devem ser definidas aqui.
-componentDidMount() Este é o método que é executado depois que o componente foi montado no DOM
- Atualização: Esta fase começa quando o componente React já nasceu no navegador e cresce recebendo novas atualizações. O componente pode ser atualizado de duas maneiras, através do envio de novas props ou a atualização do seu estado.
componentDidUpdate() é chamado imediatamente após a atualização.
componentWillUpdate() É executado somente quando shouldComponentUpdatedevolver true.
-Desmontagem: Nesta fase, o componente não é mais necessário e será desmontado do DOM. O método que se chama nesta fase é o: componentWillUnmount()

//Eventos
-Para melhor manutenção e legibilidade, dividimos nossos componentes em outras páginas
-Não esquecer do this para chamar funções dentro do onClick
-Não esquecer que sentro do setState temos de colocar {}

//Renderização condicional
-Quando queremos renderizar uma coisa ou outra no nosso componente
-Criar uma props dentro do state. Depois usar "this.state.nomeDoProsVerificador === 1 && digite o código aqui"
-podemos usar também os operadores ternários