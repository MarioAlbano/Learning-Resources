*********** 03 - BRANCH **********

//O que é um branch?
-Branch é a forma que o git separa as versões dos projetos;
-Quando um projeto é criado ele inicia na branch master, estamos trabalhando nela até este ponto do cruso;
-Geralmente cada nova feature de um projeto fica em um branch separado;
-Após a finalização das alterações os branchs são unidos para ter o código-fonte final;

//Criand e vizualizando os branches
-Para visualizar os branchs disponíveis basta digitar "git branch";
-Para criar um branch você precisa utilizar o comando "git branch <nome>";
-Estas duas operações são muito utilizadas no dia a dia de um dev;

//Deletando branches
-Podemos deletar um branch com a flag -d ou --delete;
-Não é comum deletar um branch, normalmente guardamos o histórico do trabalho;
-Geralmente se usa o delete quando o branch foi criado errado; 
-exemplo: digitar "git branch -d nome_da_branch";

//Mudando de branch
-Podemos criar mudar de branch utilizando o comando "git checkout -b <nome_da_branch>";
-Para somente mudar de branch usamos "git checkout <nome_da_branch_que_já_existe>;
-Este comando também é utilizado para dispensar mudanças de um arquivo;
-Alterando o branch podemos levar alterações que não foram commitadas junto, tome cuidado!

//Unindo branches
-O código de dois branches distintospode ser unido pelo comando git merge <nome>
-Outro comando para a lista dos mais utilizados;
-Normalmente é por meio dele que recebemos as atualizações de outros devs;
-Em outras palavras ele puxa os arquivos novos e une da outra branch na sua branch atual;

//Stash
-Podemos salver as modificações atuais para prosseguir com uma outra abordagem de solução e não perder o código;
-O comando para esta ação é o git stash;
-Após o comando o branch será resetado para a sua versão de acordo com o repo;
-Remover todas as suas mudanças nos arquivos;

//Recuperando Stash
-Podemos verificar as stashs criadas pelo comando git stash list;
-E também podemos recuperar a stash com o comando git stash <nome>;
-Desta maneira podemos continuar de onde paramos com os arquivos adicionados a stash;
-Para isto, digitamos "git stash list" e depois "git stash apply número_da_lista";
-Digitar "git stash show -p numero_da_versao" mostra exatamente o que foi mudado;


//Removendo a stash
-Para limpar totalmente as stash de um branch podemos utilizar o comando git stash clear;
-Caso seja necessário deletar uma stash específica podemos utilizar git stash drop <nome>;

//Criando tags
-Podemos criar tags nos branchs por meio do comando git tag -a <nome> -m "<msg>";
-A tag é diferente do stash, serve como um checkpoint de um branch;
-É utilizada para demarcar estágios do desenvolvimento de algum recurso;
 

//Verificando e alterando tags
-Podemos verificar uma tag com o comando git show <nome>;
-Podemos trocar de tags com o comando git checkout <nome>;
-Desta maneira podemos retroceder ou avançar em checkpoints de um branch;

//Enviando e compartilhando tags
-As tags podem ser enviadas para o repositório de código, sendo compartilhada entre os devs;
-O comando é git push origin <nome>;
-Ou se você quiser enviar mais tags git push origin --tags