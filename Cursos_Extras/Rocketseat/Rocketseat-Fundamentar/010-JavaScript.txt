---------------------INTRODUÇÃO-----------------------
//JavasScript Core
-Liguaguem de programação que roda no Navegador do usuário (front-end);
-Se você clicar em algum botão da página e aparece uma janela. Isso é o JavaScript;
-Altyeração do site ou aplicativo, conforme a interação do usuário;
-Roda também no computador (back-end);

//Oque podemos fazer?
-Podemos criar aplicações web, mobile (React Native), desktop (Electron);
-Empresas que usam:
Facebook
Google
Uber
Netflix
Tiktok
-99.99% dos sites na web usam JavaScript;
-Linguagem obrigatória para quem programa o Front-end Web;
	//Evolução
	-A comunidade crese cada vez mais e a linguagem está sempre evoluindo
		//O que vamos ver no curso?
		-Tipos de dados;
		-Variáveis;
		-Condicionais;
		-Estruturas de repetição;
		-...;

		//Dinâmica
		-Conceitos e fundamentos;
		-Prática;
		-Revisão;

//Importância da sintaxe
-Toda linguagem tem
-Uma boa comunicação precisa de uma boa sintaxe;
-82% dos erros para iniciantes na programação;

//Formas de usar o javascript
-No navegador;
-No visual studio code;
-Em compiladores online;

//Criando arquivo JS
-adicionar no final dos arquivos .js;
-Evitar utilizar nomes com acentuações;

//Comentário JS
-Utilizar o // antes do texto;
-/*Comentário de bloco*/;


---------------------INTRODUÇÃO-----------------------

//Tipos de dados
-Gramática
	-Elementos da linguagem e suas combinações;
	-A arte de falar e escrever corretamente;
-Vocabulário
	-Conjunto de termos e expressões;
	-Agrupamento de palavras;
-Precisamos saber como escrever;
-Precisamos saber os significados;
-Precisamos continuar arpendendo, para crescer nosso vocabulário;
-Conceitos e escrita
	-Vamos aprender os tipos de dados mais utilizados na linguagem
	-É possível aprender 80% de uma linguagem nova, com cerca de 20% do vocabulário;

//String
-Cadeia de caracteres;
-formas de usar: "" ´´ '';

//Number
-Números
	-int, float, NaN, infinity;

//Boolean
-ou true ou false;
-pode retornar undefined e null;

//Object
-Object
	-Objeto
	-Propriedades / atributos
	-funcionalidade / métodos

//Array(vetores)
	-Uma lista;
	-Agrupamento de dado;

//ECMAScript (orgão que padroniza o javascript)
-Conforme o ECMAScript standard temos 9 tipos de dados:
	-Datas types
	primitive / primitive value
	structural
	strtuctural primitive

//Primitivos
-string;
-number;
-boolean;
-undefined;
-symbol;
-BigInt(tipo de dados para representar números muito grandes);

//Estruturais

-Object
	Array
	Map
	Set
	Date
	...
-Function

//Primitivo estrutual
-Null;

//Variáveis
-Nomes simbólicos para receber algum valor;
-Atalhos de código;
-Identificadores;
-3 palavras reservadas para criar uma variável
	var
	let
	const
-declarar uma variável = criando uma variável;

//Tipagem
-O JS é uma linguagem fracamente tipada (ou seja, a variável não precisa ser declarada) e dinânima (podemos mudar o tipo da variável);
-Variáveis não precisam ter um tipo previamente definido;
-Podemos mudar o conteúdo da variável;

//scope var
-Escopo determina a visibilidade de alguma variável no JS;
-Muito flexível, tanto que acaba dando bugs;
	//Block statement
	-O bloco, também criará um novo escopo. Chamamos de "block-scoped";
-Var é global e, também local;
-Hoisting;

// scope let e const
-funcionam somente dentro do escopo que foram criados;

// Para cirar nomes
-JS é case-sensitive (sensível ao caso);
-JS aceita a cadeia de caracteres Unicode (aspas e acentuações);
	-Posso:
	iniciar com esses caracteres especiais: $ _
	iniciar com letras
	colocar acentos
	letras maiúsculas e minúsculas fazem diferença
	-Não posso:
	iniciar com números
	colocar espaços vazios no nome
	//Ideal:
	Criar nomes que fazem sentido
	Que explique o que a variável é ou faz
	camelCase
	snake_case
	Escrever em inglês


--------------------Praticando------------------

//Declarando na prática
-Que tipo de dado foi colocado na variável (typeof variavel);

//Agrupamento de declarações
let age, isHuman;

//multiplos argumentos na funcao
console.log(nome, age, isHuman);

//concatenando escrita de texto + variaveis
"sua idade é" + age;

//template literals 
${};

//Object
const person = {
	name: "Mario",
	age: 27,
	weight: 88.5,
	isAdmin: true
}
console.log(person.name);

//Array
const animals = [
	"lion",
	"monkey",
	"cat"
]
console.log(animals[0]);

--------------------Funções------------------

//Functions
-Servem para que não precise repetir o código inumeras vezes;
-Também tem a tarefa de agrupar os códigos;
-declaration - declaração da função;
-function statement (corpo da função);

//Executando
-rodar, chamar, invocar;
-Execute, run, call, invoke;

//Argumentos e Parâmetros 
-(2, 3)
2 3 = argumentos. Usarão esta informação dentro da função;
(2 , 3) = parametros;
-Também só funcionam dentro do escopo;

//Retornando valores dentro da função
-Utilizando a palavra "return"
-quando lido o return, a função para e retorna o valor de return;

//function scope
-Se não criamos dentro da função e sem parâmetro, ele tenta buscar a variavel fora do escopo;
-Apos chamado uma função, a mesma pode modificar as variáveis criadas antes dessa função;

//function hoisting
-Funçõs, sem declarações de let const ou var, também recebem hoisting;

//Arrow function
-Modo mais compactado de fazer funções;
Ex: const myName = () => {
	código_aqui;
}

//Callback function
-Significa chamar de volta;
-chama uma função que chama outra de volta;

//Function () constructor
-Expressão new;
-Criar um novo objeto;
-this keyword (cria um objeto a partir do outro para que quando instanciarmos esta classe podemos usar sem alternar o nome);


----------------Manipulando Dados----------------------

//Prototype

-prototype-based language;
-prototype chain (idéia de sempre buscar propriedades e funções de protótipos passados);
- __proto__ (mostra todas as propriedades que puxou do objeto. Na parte de baixa mostra as propriedades raiz que o objeto herdou);
-Uma maneira de herdar prorpiedades e funcionalidades do seu protótipo;
-Podemos utilizar o propótipo para saber oque tem disponível de funções para trabalharmos com o objeto;
-Colocando um "." podemos acessar todos esses valores;


//Type conversion
-type conversion (typecasting) (conversão que nós fazemos) vs type coersion (conversão forçada pelo javascript)
*alteração de um tipo de dado para outro tipo;
-Exemplo de concatenação de strings com número (type coersion) e quando convertemos a string para numero (type conversion);

//Manipoulando strings e números
-Transformar string em número e número em string;
-podemos converter com Number() e String();

//Contando caracteres e quantos digitos tem um número
- .length mostra quantos caracteres temos;
- para number podemos converter para string e depois usar o .lenght;

//Transformando um número quebrado com 2 decimais e trocar ponto por vírgula;
-utilizar o ".toFixed(2)", no caso indicando para podermos ver até duas casas;
-utilizar o ".replace(".", ",")" para trocarmos palavras;
-podemos atrelar uma função a outra;


//Transformando letras minúsculas em maiúsculas. Faça o contrário disso também
-utilizar ".toLowerCase()" para minúsculas;
-utilizar ".toUpperCase()" para maiúsculas;

//Verificando se tem uma palavra específica
-utilizar ".includes()";
-é case sensitive;

//Manipulação strings e arrays
-Separe um texto que contem espaços. Depois trocando o espaço por _;
-Criar uma variável da string. Utilizar variavel.split(" "). Depois utilizar variavel.join("_") para poder juntar a frase e trocando por "_" ao invés de espaços;

//Criar array com construtor
-utilizar o new para instanciar uma nova classe

//Elementos do array
-Contando elementos de um array;
-adicionar ".lenght" apos o [] do array;

//Transformar uma cadeia de caracteres em elementos de um array
-utilizar o "Array.from()"
-podemos por exemplo utilizar o "Array.from(word)" para transformar em array separado por caracteres;

//Manipulando arrays
-Adicionando um item no fim do array
	array.push("adicionado_esta_string");
-Adicionar no começo do array
	array.unshift("sql");
-Remover do fim
	array.pop();
-Removendo do começo
	array.shift();
-Pegar somente alguns elementos do array
	array.slice(1, 3);
-remover 1 ou mais items em qualqeur posição do array;
	array.splice(1, 2);
-Encontrar a posição de um elemento no array
	array.indeOf("css");

//Expressões e Operadores
-Expressions
-Operators
	Binary
	Unary
	Ternary

//new
-left-hand-side expression;
-cria um novo objeto;

//Operadores unários
-typeof; typeof minha_idade;
-delete; Ex: delete person.age;

//Operadores aritiméticos
-Multiplicação *;
-Divisão /;
-Soma +;
-Subtração -;
-Resto da divisão %;
-Incremento ++;
-Decremento --;
-Exponencial **;

//Grouping operator ()
- Usar () para agrupar operações que você deseja dar prioridade;

//Operadores de comparação
-Comparar a resposta com um boolean;
- utilizar == , != ;
- == significa igual. === significa igual e do mesmo tipo;
-A mesma lógica funciona para != e !==;

//Maior e menor que
-Utilizar <, >, <=, >=;

//Operadores de atribuição (Assigment)
- utilizar =, +=, -=, *=, 

//Operadores lógicos (logical operators)
-"true" para verdadeiro, "false" para falso;
-"&&" para dizer E;
-"||" para dizer OU;
-"!" para dizer não;

//Operador condicional (ternário)
-Condição então valor 1 se não valor 2;
- "condition ? value1 : value2";

//Operador de string
-comparação: ==;
-concatenação: +;

//Falsy
-Quando um valor é considerado false em contextos onde um booleano é obrigatório (condicionais e loops);
	false
	0
	-0
	""
	null
	undefined
	NaN

//Truthy
-Quando um valor é considerado true em contextos onde um booleano é obrigatório (condicionais e loops);
	true
	{}
	[]
	1
	3.23
	0
	false
	1
	infinity

--------------------- Control flow -------------------

//if e else
-digitando "if(){} else{}";
-usar o "else if" para adicionar mais um bloco;
-sempre usar dentro do bloco;
-criar variáveis para receber condicionais;

//switch
-uma alternativa para o if else;
-melhor utilizado quando existem várias alternativas;
-ex: switch (expression) {
case "a":
//código
break
case "b": 
// código
break
}

//throw
-jogar o bloco de código para testar erros;


//try...catch
Try tenta executar o bloco de código e se houver um erro será disparado;
Catch pega esse erro na aplicação;

//Estrutura de repetição
-for(inicialização_da_variavel; enquanto_menor_que; incrementa/decrementa){};
	break = para a execução do loop;
	continue = pula a execução no momento;

//While
-Enquanto;
-Usado como uma alternativa do for;
-Melhor utilizado quando não sabemos quando o loop irá parar;

//for...of
-for = pegar. of = de;
-Uma declaração que vai criar um loop através de alguma variável/array existente;
-Ex: for(let char of name) {
	console.log(char);
}

//for...in
-Estará pegando as propriedades do objeto;
-Ex: for(let property in person) {
	console.log(property);
}
